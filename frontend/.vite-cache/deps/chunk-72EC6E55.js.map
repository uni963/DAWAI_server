{
  "version": 3,
  "sources": ["../../node_modules/tonal-array/build/es6.js", "../../node_modules/tonal-note/build/es6.js", "../../node_modules/tonal-interval/build/es6.js", "../../node_modules/tonal-distance/build/es6.js", "../../node_modules/tonal-dictionary/build/es6.js", "../../node_modules/tonal-dictionary/build/data/scales.json", "../../node_modules/tonal-dictionary/build/data/chords.json", "../../node_modules/tonal-pcset/build/es6.js", "../../node_modules/tonal-scale/build/es6.js", "../../node_modules/tonal-chord/build/es6.js", "../../node_modules/tonal/index.js"],
  "sourcesContent": ["/**\n * [![npm version](https://img.shields.io/npm/v/tonal-array.svg?style=flat-square)](https://www.npmjs.com/package/tonal-array)\n *\n * Tonal array utilities. Create ranges, sort notes, ...\n *\n * @example\n * import * as Array;\n * Array.sort([\"f\", \"a\", \"c\"]) // => [\"C\", \"F\", \"A\"]\n *\n * @example\n * const Array = require(\"tonal-array\")\n * Array.range(1, 4) // => [1, 2, 3, 4]\n *\n * @module Array\n */\nimport { props, name } from \"tonal-note\";\n\n// ascending range\nfunction ascR(b, n) {\n  for (var a = []; n--; a[n] = n + b){ ; }\n  return a;\n}\n// descending range\nfunction descR(b, n) {\n  for (var a = []; n--; a[n] = b - n){ ; }\n  return a;\n}\n\n/**\n * Create a numeric range\n *\n * @param {Number} from\n * @param {Number} to\n * @return {Array}\n *\n * @example\n * Array.range(-2, 2) // => [-2, -1, 0, 1, 2]\n * Array.range(2, -2) // => [2, 1, 0, -1, -2]\n */\nexport function range(a, b) {\n  return a === null || b === null\n    ? []\n    : a < b\n      ? ascR(a, b - a + 1)\n      : descR(a, a - b + 1);\n}\n/**\n *\n * Rotates a list a number of times. It\"s completly agnostic about the\n * contents of the list.\n *\n * @param {Integer} times - the number of rotations\n * @param {Array} array\n * @return {Array} the rotated array\n * @example\n * Array.rotate(1, [1, 2, 3]) // => [2, 3, 1]\n */\nexport function rotate(times, arr) {\n  var len = arr.length;\n  var n = ((times % len) + len) % len;\n  return arr.slice(n, len).concat(arr.slice(0, n));\n}\n\n/**\n * Return a copy of the array with the null values removed\n * @function\n * @param {Array} array\n * @return {Array}\n *\n * @example\n * Array.compact([\"a\", \"b\", null, \"c\"]) // => [\"a\", \"b\", \"c\"]\n */\nexport var compact = function (arr) { return arr.filter(function (n) { return n === 0 || n; }); };\n\n// a function that get note heights (with negative number for pitch classes)\nvar height = function (name) {\n  var m = props(name).midi;\n  return m !== null ? m : props(name + \"-100\").midi;\n};\n\n/**\n * Sort an array of notes in ascending order\n *\n * @param {String|Array} notes\n * @return {Array} sorted array of notes\n */\nexport function sort(src) {\n  return compact(src.map(name)).sort(function (a, b) { return height(a) > height(b); });\n}\n\n/**\n * Get sorted notes with duplicates removed\n *\n * @function\n * @param {Array} notes\n */\nexport function unique(arr) {\n  return sort(arr).filter(function (n, i, a) { return i === 0 || n !== a[i - 1]; });\n}\n\n/**\n * Randomizes the order of the specified array in-place, using the Fisherâ€“Yates shuffle.\n *\n * @private\n * @function\n * @param {Array|String} arr - the array\n * @return {Array} the shuffled array\n *\n * @example\n * Array.shuffle([\"C\", \"D\", \"E\", \"F\"])\n */\nexport var shuffle = function (arr, rnd) {\n  if ( rnd === void 0 ) rnd = Math.random;\n\n  var i, t;\n  var m = arr.length;\n  while (m) {\n    i = (rnd() * m--) | 0;\n    t = arr[m];\n    arr[m] = arr[i];\n    arr[i] = t;\n  }\n  return arr;\n};\n\n/**\n * Get all permutations of an array\n * http://stackoverflow.com/questions/9960908/permutations-in-javascript\n *\n * @param {Array} array - the array\n * @return {Array<Array>} an array with all the permutations\n */\nexport var permutations = function (arr) {\n  if (arr.length === 0) { return [[]]; }\n  return permutations(arr.slice(1)).reduce(function(acc, perm) {\n    return acc.concat(\n      arr.map(function(e, pos) {\n        var newPerm = perm.slice();\n        newPerm.splice(pos, 0, arr[0]);\n        return newPerm;\n      })\n    );\n  }, []);\n};\n", "var NAMES = \"C C# Db D D# Eb E F F# Gb G G# Ab A A# Bb B\".split(\" \");\r\nvar names = function (accTypes) {\r\n    return typeof accTypes !== \"string\"\r\n        ? NAMES.slice()\r\n        : NAMES.filter(function (n) {\r\n            var acc = n[1] || \" \";\r\n            return accTypes.indexOf(acc) !== -1;\r\n        });\r\n};\r\nvar SHARPS = names(\" #\");\r\nvar FLATS = names(\" b\");\r\nvar REGEX = /^([a-gA-G]?)(#{1,}|b{1,}|x{1,}|)(-?\\d*)\\s*(.*)$/;\r\nfunction tokenize(str) {\r\n    if (typeof str !== \"string\")\r\n        str = \"\";\r\n    var m = REGEX.exec(str);\r\n    return [m[1].toUpperCase(), m[2].replace(/x/g, \"##\"), m[3], m[4]];\r\n}\r\nvar NO_NOTE = Object.freeze({\r\n    pc: null,\r\n    name: null,\r\n    step: null,\r\n    alt: null,\r\n    oct: null,\r\n    octStr: null,\r\n    chroma: null,\r\n    midi: null,\r\n    freq: null\r\n});\r\nvar SEMI = [0, 2, 4, 5, 7, 9, 11];\r\nvar properties = function (str) {\r\n    var tokens = tokenize(str);\r\n    if (tokens[0] === \"\" || tokens[3] !== \"\")\r\n        return NO_NOTE;\r\n    var letter = tokens[0], acc = tokens[1], octStr = tokens[2];\r\n    var p = {\r\n        letter: letter,\r\n        acc: acc,\r\n        octStr: octStr,\r\n        pc: letter + acc,\r\n        name: letter + acc + octStr,\r\n        step: (letter.charCodeAt(0) + 3) % 7,\r\n        alt: acc[0] === \"b\" ? -acc.length : acc.length,\r\n        oct: octStr.length ? +octStr : null,\r\n        chroma: 0,\r\n        midi: null,\r\n        freq: null\r\n    };\r\n    p.chroma = (SEMI[p.step] + p.alt + 120) % 12;\r\n    p.midi = p.oct !== null ? SEMI[p.step] + p.alt + 12 * (p.oct + 1) : null;\r\n    p.freq = midiToFreq(p.midi);\r\n    return Object.freeze(p);\r\n};\r\nvar memo = function (fn, cache) {\r\n    if (cache === void 0) { cache = {}; }\r\n    return function (str) { return cache[str] || (cache[str] = fn(str)); };\r\n};\r\nvar props = memo(properties);\r\nvar name = function (str) { return props(str).name; };\r\nvar pc = function (str) { return props(str).pc; };\r\nvar isMidiRange = function (m) { return m >= 0 && m <= 127; };\r\nvar midi = function (note) {\r\n    if (typeof note !== \"number\" && typeof note !== \"string\") {\r\n        return null;\r\n    }\r\n    var midi = props(note).midi;\r\n    var value = midi || midi === 0 ? midi : +note;\r\n    return isMidiRange(value) ? value : null;\r\n};\r\nvar midiToFreq = function (midi, tuning) {\r\n    if (tuning === void 0) { tuning = 440; }\r\n    return typeof midi === \"number\" ? Math.pow(2, (midi - 69) / 12) * tuning : null;\r\n};\r\nvar freq = function (note) { return props(note).freq || midiToFreq(note); };\r\nvar L2 = Math.log(2);\r\nvar L440 = Math.log(440);\r\nvar freqToMidi = function (freq) {\r\n    var v = (12 * (Math.log(freq) - L440)) / L2 + 69;\r\n    return Math.round(v * 100) / 100;\r\n};\r\nvar chroma = function (str) { return props(str).chroma; };\r\nvar oct = function (str) { return props(str).oct; };\r\nvar LETTERS = \"CDEFGAB\";\r\nvar stepToLetter = function (step) { return LETTERS[step]; };\r\nvar fillStr = function (s, n) { return Array(n + 1).join(s); };\r\nvar numToStr = function (num, op) {\r\n    return typeof num !== \"number\" ? \"\" : op(num);\r\n};\r\nvar altToAcc = function (alt) {\r\n    return numToStr(alt, function (alt) { return (alt < 0 ? fillStr(\"b\", -alt) : fillStr(\"#\", alt)); });\r\n};\r\nvar from = function (fromProps, baseNote) {\r\n    if (fromProps === void 0) { fromProps = {}; }\r\n    if (baseNote === void 0) { baseNote = null; }\r\n    var _a = baseNote\r\n        ? Object.assign({}, props(baseNote), fromProps)\r\n        : fromProps, step = _a.step, alt = _a.alt, oct = _a.oct;\r\n    if (typeof step !== \"number\")\r\n        return null;\r\n    var letter = stepToLetter(step);\r\n    if (!letter)\r\n        return null;\r\n    var pc = letter + altToAcc(alt);\r\n    return oct || oct === 0 ? pc + oct : pc;\r\n};\r\nvar build = from;\r\nfunction fromMidi(num, sharps) {\r\n    if (sharps === void 0) { sharps = false; }\r\n    num = Math.round(num);\r\n    var pcs = sharps === true ? SHARPS : FLATS;\r\n    var pc = pcs[num % 12];\r\n    var o = Math.floor(num / 12) - 1;\r\n    return pc + o;\r\n}\r\nvar simplify = function (note, sameAcc) {\r\n    if (sameAcc === void 0) { sameAcc = true; }\r\n    var _a = props(note), alt = _a.alt, chroma = _a.chroma, midi = _a.midi;\r\n    if (chroma === null)\r\n        return null;\r\n    var alteration = alt;\r\n    var useSharps = sameAcc === false ? alteration < 0 : alteration > 0;\r\n    return midi === null\r\n        ? pc(fromMidi(chroma, useSharps))\r\n        : fromMidi(midi, useSharps);\r\n};\r\nvar enharmonic = function (note) { return simplify(note, false); };\n\nexport { names, tokenize, props, name, pc, midi, midiToFreq, freq, freqToMidi, chroma, oct, stepToLetter, altToAcc, from, build, fromMidi, simplify, enharmonic };\n", "var IVL_TNL = \"([-+]?\\\\d+)(d{1,4}|m|M|P|A{1,4})\";\r\nvar IVL_STR = \"(AA|A|P|M|m|d|dd)([-+]?\\\\d+)\";\r\nvar REGEX = new RegExp(\"^\" + IVL_TNL + \"|\" + IVL_STR + \"$\");\r\nvar SIZES = [0, 2, 4, 5, 7, 9, 11];\r\nvar TYPES = \"PMMPPMM\";\r\nvar CLASSES = [0, 1, 2, 3, 4, 5, 6, 5, 4, 3, 2, 1];\r\nvar NAMES = \"1P 2m 2M 3m 3M 4P 5P 6m 6M 7m 7M 8P\".split(\" \");\r\nvar names = function (types) {\r\n    return typeof types !== \"string\"\r\n        ? NAMES.slice()\r\n        : NAMES.filter(function (n) { return types.indexOf(n[1]) !== -1; });\r\n};\r\nvar tokenize = function (str) {\r\n    var m = REGEX.exec(\"\" + str);\r\n    if (m === null)\r\n        return null;\r\n    return (m[1] ? [m[1], m[2]] : [m[4], m[3]]);\r\n};\r\nvar NO_IVL = Object.freeze({\r\n    name: null,\r\n    num: null,\r\n    q: null,\r\n    step: null,\r\n    alt: null,\r\n    dir: null,\r\n    type: null,\r\n    simple: null,\r\n    semitones: null,\r\n    chroma: null,\r\n    oct: null\r\n});\r\nvar fillStr = function (s, n) { return Array(Math.abs(n) + 1).join(s); };\r\nvar qToAlt = function (type, q) {\r\n    if (q === \"M\" && type === \"M\")\r\n        return 0;\r\n    if (q === \"P\" && type === \"P\")\r\n        return 0;\r\n    if (q === \"m\" && type === \"M\")\r\n        return -1;\r\n    if (/^A+$/.test(q))\r\n        return q.length;\r\n    if (/^d+$/.test(q))\r\n        return type === \"P\" ? -q.length : -q.length - 1;\r\n    return null;\r\n};\r\nvar altToQ = function (type, alt) {\r\n    if (alt === 0)\r\n        return type === \"M\" ? \"M\" : \"P\";\r\n    else if (alt === -1 && type === \"M\")\r\n        return \"m\";\r\n    else if (alt > 0)\r\n        return fillStr(\"A\", alt);\r\n    else if (alt < 0)\r\n        return fillStr(\"d\", type === \"P\" ? alt : alt + 1);\r\n    else\r\n        return null;\r\n};\r\nvar numToStep = function (num) { return (Math.abs(num) - 1) % 7; };\r\nvar properties = function (str) {\r\n    var t = tokenize(str);\r\n    if (t === null)\r\n        return NO_IVL;\r\n    var p = {\r\n        num: 0,\r\n        q: \"d\",\r\n        name: \"\",\r\n        type: \"M\",\r\n        step: 0,\r\n        dir: -1,\r\n        simple: 1,\r\n        alt: 0,\r\n        oct: 0,\r\n        semitones: 0,\r\n        chroma: 0,\r\n        ic: 0\r\n    };\r\n    p.num = +t[0];\r\n    p.q = t[1];\r\n    p.step = numToStep(p.num);\r\n    p.type = TYPES[p.step];\r\n    if (p.type === \"M\" && p.q === \"P\")\r\n        return NO_IVL;\r\n    p.name = \"\" + p.num + p.q;\r\n    p.dir = p.num < 0 ? -1 : 1;\r\n    p.simple = (p.num === 8 || p.num === -8\r\n        ? p.num\r\n        : p.dir * (p.step + 1));\r\n    p.alt = qToAlt(p.type, p.q);\r\n    p.oct = Math.floor((Math.abs(p.num) - 1) / 7);\r\n    p.semitones = p.dir * (SIZES[p.step] + p.alt + 12 * p.oct);\r\n    p.chroma = ((((p.dir * (SIZES[p.step] + p.alt)) % 12) + 12) %\r\n        12);\r\n    return Object.freeze(p);\r\n};\r\nvar cache = {};\r\nfunction props(str) {\r\n    if (typeof str !== \"string\")\r\n        return NO_IVL;\r\n    return cache[str] || (cache[str] = properties(str));\r\n}\r\nvar num = function (str) { return props(str).num; };\r\nvar name = function (str) { return props(str).name; };\r\nvar semitones = function (str) { return props(str).semitones; };\r\nvar chroma = function (str) { return props(str).chroma; };\r\nvar ic = function (ivl) {\r\n    if (typeof ivl === \"string\")\r\n        ivl = props(ivl).chroma;\r\n    return typeof ivl === \"number\" ? CLASSES[ivl % 12] : null;\r\n};\r\nvar build = function (_a) {\r\n    var _b = _a === void 0 ? {} : _a, num = _b.num, step = _b.step, alt = _b.alt, _c = _b.oct, oct = _c === void 0 ? 1 : _c, dir = _b.dir;\r\n    if (step !== undefined)\r\n        num = step + 1 + 7 * oct;\r\n    if (num === undefined)\r\n        return null;\r\n    if (typeof alt !== \"number\")\r\n        return null;\r\n    var d = typeof dir !== \"number\" ? \"\" : dir < 0 ? \"-\" : \"\";\r\n    var type = TYPES[numToStep(num)];\r\n    return (d + num + altToQ(type, alt));\r\n};\r\nvar simplify = function (str) {\r\n    var p = props(str);\r\n    if (p === NO_IVL)\r\n        return null;\r\n    var intervalProps = p;\r\n    return intervalProps.simple + intervalProps.q;\r\n};\r\nvar invert = function (str) {\r\n    var p = props(str);\r\n    if (p === NO_IVL)\r\n        return null;\r\n    var intervalProps = p;\r\n    var step = (7 - intervalProps.step) % 7;\r\n    var alt = intervalProps.type === \"P\" ? -intervalProps.alt : -(intervalProps.alt + 1);\r\n    return build({ step: step, alt: alt, oct: intervalProps.oct, dir: intervalProps.dir });\r\n};\r\nvar IN = [1, 2, 2, 3, 3, 4, 5, 5, 6, 6, 7, 7];\r\nvar IQ = \"P m M m M P d P m M m M\".split(\" \");\r\nvar fromSemitones = function (num) {\r\n    var d = num < 0 ? -1 : 1;\r\n    var n = Math.abs(num);\r\n    var c = n % 12;\r\n    var o = Math.floor(n / 12);\r\n    return d * (IN[c] + 7 * o) + IQ[c];\r\n};\n\nexport { names, tokenize, qToAlt, altToQ, props, num, name, semitones, chroma, ic, build, simplify, invert, fromSemitones };\n", "/**\n * [![npm version](https://img.shields.io/npm/v/tonal-distance.svg)](https://www.npmjs.com/package/tonal-distance)\n * [![tonal](https://img.shields.io/badge/tonal-distance-yellow.svg)](https://github.com/danigb/tonal/tree/master/packages/tonal/distance)\n *\n * Transpose notes by intervals and find distances between notes\n *\n * @example\n * // es6\n * import * as Distance from \"tonal-distance\"\n * Distance.interval(\"C3\", \"C4\") // => \"1P\"\n *\n * @example\n * // es6 import selected functions\n * import { interval, semitones, transpose } from \"tonal-distance\"\n *\n * semitones(\"C\" ,\"D\") // => 2\n * interval(\"C4\", \"G4\") // => \"5P\"\n * transpose(\"C4\", \"P5\") // => \"G4\"\n *\n * @example\n * // included in tonal facade\n * const Tonal = require(\"tonal\");\n * Tonal.Distance.transpose(\"C4\", \"P5\")\n * Tonal.Distance.transposeBy(\"P5\", \"C4\")\n *\n * @module Distance\n */\nimport { props as noteProps, build as fromNote } from \"tonal-note\";\nimport { props as iprops, build as ibuild } from \"tonal-interval\";\n\n// Map from letter step to number of fifths starting from \"C\":\n// { C: 0, D: 2, E: 4, F: -1, G: 1, A: 3, B: 5 }\nvar FIFTHS = [0, 2, 4, -1, 1, 3, 5];\n\n// Given a number of fifths, return the octaves they span\nvar fOcts = function (f) { return Math.floor((f * 7) / 12); };\n\n// Get the number of octaves it span each step\nvar FIFTH_OCTS = FIFTHS.map(fOcts);\n\nvar encode = function (ref) {\n  var step = ref.step;\n  var alt = ref.alt;\n  var oct = ref.oct;\n  var dir = ref.dir; if ( dir === void 0 ) dir = 1;\n\n  var f = FIFTHS[step] + 7 * alt;\n  if (oct === null) { return [dir * f]; }\n  var o = oct - FIFTH_OCTS[step] - 4 * alt;\n  return [dir * f, dir * o];\n};\n\n// We need to get the steps from fifths\n// Fifths for CDEFGAB are [ 0, 2, 4, -1, 1, 3, 5 ]\n// We add 1 to fifths to avoid negative numbers, so:\n// for [\"F\", \"C\", \"G\", \"D\", \"A\", \"E\", \"B\"] we have:\nvar STEPS = [3, 0, 4, 1, 5, 2, 6];\n\n// Return the number of fifths as if it were unaltered\nfunction unaltered(f) {\n  var i = (f + 1) % 7;\n  return i < 0 ? 7 + i : i;\n}\n\nvar decode = function (f, o, dir) {\n  var step = STEPS[unaltered(f)];\n  var alt = Math.floor((f + 1) / 7);\n  if (o === undefined) { return { step: step, alt: alt, dir: dir }; }\n  var oct = o + 4 * alt + FIFTH_OCTS[step];\n  return { step: step, alt: alt, oct: oct, dir: dir };\n};\n\nvar memo = function (fn, cache) {\n  if ( cache === void 0 ) cache = {};\n\n  return function (str) { return cache[str] || (cache[str] = fn(str)); };\n};\n\nvar encoder = function (props) { return memo(function (str) {\n    var p = props(str);\n    return p.name === null ? null : encode(p);\n  }); };\n\nvar encodeNote = encoder(noteProps);\nvar encodeIvl = encoder(iprops);\n\n/**\n * Transpose a note by an interval. The note can be a pitch class.\n *\n * This function can be partially applied.\n *\n * @param {string} note\n * @param {string} interval\n * @return {string} the transposed note\n * @example\n * import { tranpose } from \"tonal-distance\"\n * transpose(\"d3\", \"3M\") // => \"F#3\"\n * // it works with pitch classes\n * transpose(\"D\", \"3M\") // => \"F#\"\n * // can be partially applied\n * [\"C\", \"D\", \"E\", \"F\", \"G\"].map(transpose(\"M3)) // => [\"E\", \"F#\", \"G#\", \"A\", \"B\"]\n */\nexport function transpose(note, interval) {\n  if (arguments.length === 1) { return function (i) { return transpose(note, i); }; }\n  var n = encodeNote(note);\n  var i = encodeIvl(interval);\n  if (n === null || i === null) { return null; }\n  var tr = n.length === 1 ? [n[0] + i[0]] : [n[0] + i[0], n[1] + i[1]];\n  return fromNote(decode(tr[0], tr[1]));\n}\n\n/**\n * Transpose a pitch class by a number of perfect fifths.\n *\n * It can be partially applied.\n *\n * @function\n * @param {string} pitchClass - the pitch class\n * @param {Integer} fifhts - the number of fifths\n * @return {string} the transposed pitch class\n *\n * @example\n * import { trFifths } from \"tonal-transpose\"\n * [0, 1, 2, 3, 4].map(trFifths(\"C\")) // => [\"C\", \"G\", \"D\", \"A\", \"E\"]\n * // or using tonal\n * Distance.trFifths(\"G4\", 1) // => \"D\"\n */\n\nexport function trFifths(note, fifths) {\n  if (arguments.length === 1) { return function (f) { return trFifths(note, f); }; }\n  var n = encodeNote(note);\n  if (n === null) { return null; }\n  return fromNote(decode(n[0] + fifths));\n}\n\n/**\n * Get the distance in fifths between pitch classes\n *\n * Can be partially applied.\n *\n * @param {string} to - note or pitch class\n * @param {string} from - note or pitch class\n */\nexport function fifths(from, to) {\n  if (arguments.length === 1) { return function (to) { return fifths(from, to); }; }\n  var f = encodeNote(from);\n  var t = encodeNote(to);\n  if (t === null || f === null) { return null; }\n  return t[0] - f[0];\n}\n\n/**\n * The same as transpose with the arguments inverted.\n *\n * Can be partially applied.\n *\n * @param {string} note\n * @param {string} interval\n * @return {string} the transposed note\n * @example\n * import { tranposeBy } from \"tonal-distance\"\n * transposeBy(\"3m\", \"5P\") // => \"7m\"\n */\nexport function transposeBy(interval, note) {\n  if (arguments.length === 1) { return function (n) { return transpose(n, interval); }; }\n  return transpose(note, interval);\n}\n\nvar isDescending = function (e) { return e[0] * 7 + e[1] * 12 < 0; };\nvar decodeIvl = function (i) { return isDescending(i) ? decode(-i[0], -i[1], -1) : decode(i[0], i[1], 1); };\n\nexport function addIntervals(ivl1, ivl2, dir) {\n  var i1 = encodeIvl(ivl1);\n  var i2 = encodeIvl(ivl2);\n  if (i1 === null || i2 === null) { return null; }\n  var i = [i1[0] + dir * i2[0], i1[1] + dir * i2[1]];\n  return ibuild(decodeIvl(i));\n}\n\n/**\n * Add two intervals\n *\n * Can be partially applied.\n *\n * @param {string} interval1\n * @param {string} interval2\n * @return {string} the resulting interval\n * @example\n * import { add } from \"tonal-distance\"\n * add(\"3m\", \"5P\") // => \"7m\"\n */\nexport function add(ivl1, ivl2) {\n  if (arguments.length === 1) { return function (i2) { return add(ivl1, i2); }; }\n  return addIntervals(ivl1, ivl2, 1);\n}\n\n/**\n * Subtract two intervals\n *\n * Can be partially applied\n *\n * @param {string} minuend\n * @param {string} subtrahend\n * @return {string} interval diference\n */\nexport function subtract(ivl1, ivl2) {\n  if (arguments.length === 1) { return function (i2) { return add(ivl1, i2); }; }\n  return addIntervals(ivl1, ivl2, -1);\n}\n\n/**\n * Find the interval between two pitches. It works with pitch classes\n * (both must be pitch classes and the interval is always ascending)\n *\n * Can be partially applied\n *\n * @param {string} from - distance from\n * @param {string} to - distance to\n * @return {string} the interval distance\n *\n * @example\n * import { interval } from \"tonal-distance\"\n * interval(\"C2\", \"C3\") // => \"P8\"\n * interval(\"G\", \"B\") // => \"M3\"\n *\n * @example\n * import * as Distance from \"tonal-distance\"\n * Distance.interval(\"M2\", \"P5\") // => \"P4\"\n */\nexport function interval(from, to) {\n  if (arguments.length === 1) { return function (t) { return interval(from, t); }; }\n  var f = encodeNote(from);\n  var t = encodeNote(to);\n  if (f === null || t === null || f.length !== t.length) { return null; }\n  var d =\n    f.length === 1\n      ? [t[0] - f[0], -Math.floor(((t[0] - f[0]) * 7) / 12)]\n      : [t[0] - f[0], t[1] - f[1]];\n  return ibuild(decodeIvl(d));\n}\n\n/**\n * Get the distance between two notes in semitones\n *\n * @param {String|Pitch} from - first note\n * @param {String|Pitch} to - last note\n * @return {Integer} the distance in semitones or null if not valid notes\n * @example\n * import { semitones } from \"tonal-distance\"\n * semitones(\"C3\", \"A2\") // => -3\n * // or use tonal\n * Tonal.Distance.semitones(\"C3\", \"G3\") // => 7\n */\nexport function semitones(from, to) {\n  if (arguments.length === 1) { return function (t) { return semitones(from, t); }; }\n  var f = noteProps(from);\n  var t = noteProps(to);\n  return f.midi !== null && t.midi !== null\n    ? t.midi - f.midi\n    : f.chroma !== null && t.chroma !== null\n      ? (t.chroma - f.chroma + 12) % 12\n      : null;\n}\n", "/**\n * [![npm version](https://img.shields.io/npm/v/tonal-dictionary.svg)](https://www.npmjs.com/package/tonal-dictionary)\n *\n * `tonal-dictionary` contains a dictionary of musical scales and chords\n *\n * This is part of [tonal](https://www.npmjs.com/package/tonal) music theory library.\n *\n * @example\n * // es6\n * import * as Dictionary from \"tonal-dictionary\"\n * // es5\n * const Dictionary = require(\"tonal-dictionary\")\n *\n * @example\n * Dictionary.chord(\"Maj7\") // => [\"1P\", \"3M\", \"5P\", \"7M\"]\n *\n * @module Dictionary\n */\nimport sdata from \"./data/scales.json\";\nimport cdata from \"./data/chords.json\";\nimport { chroma } from \"tonal-pcset\";\n\nexport var dictionary = function (raw) {\n  var keys = Object.keys(raw).sort();\n  var data = [];\n  var index = [];\n\n  var add = function (name, ivls, chroma) {\n    data[name] = ivls;\n    index[chroma] = index[chroma] || [];\n    index[chroma].push(name);\n  };\n\n  keys.forEach(function (key) {\n    var ivls = raw[key][0].split(\" \");\n    var alias = raw[key][1];\n    var chr = chroma(ivls);\n\n    add(key, ivls, chr);\n    if (alias) { alias.forEach(function (a) { return add(a, ivls, chr); }); }\n  });\n  var allKeys = Object.keys(data).sort();\n\n  var dict = function (name) { return data[name]; };\n  dict.names = function (p) {\n    if (typeof p === \"string\") { return (index[p] || []).slice(); }\n    else { return (p === true ? allKeys : keys).slice(); }\n  };\n  return dict;\n};\n\nexport var combine = function (a, b) {\n  var dict = function (name) { return a(name) || b(name); };\n  dict.names = function (p) { return a.names(p).concat(b.names(p)); };\n  return dict;\n};\n\n/**\n * A dictionary of scales: a function that given a scale name (without tonic)\n * returns an array of intervals\n *\n * @function\n * @param {string} name\n * @return {Array} intervals\n * @example\n * import { scale } from \"tonal-dictionary\"\n * scale(\"major\") // => [\"1P\", \"2M\", ...]\n * scale.names(); // => [\"major\", ...]\n */\nexport var scale = dictionary(sdata);\n\n/**\n * A dictionary of chords: a function that given a chord type\n * returns an array of intervals\n *\n * @function\n * @param {string} type\n * @return {Array} intervals\n * @example\n * import { chord } from \"tonal-dictionary\"\n * chord(\"Maj7\") // => [\"1P\", \"3M\", ...]\n * chord.names(); // => [\"Maj3\", ...]\n */\nexport var chord = dictionary(cdata);\nexport var pcset = combine(scale, chord);\n", "{\n  \"chromatic\": [\"1P 2m 2M 3m 3M 4P 4A 5P 6m 6M 7m 7M\"],\n  \"lydian\": [\"1P 2M 3M 4A 5P 6M 7M\"],\n  \"major\": [\"1P 2M 3M 4P 5P 6M 7M\", [\"ionian\"]],\n  \"mixolydian\": [\"1P 2M 3M 4P 5P 6M 7m\", [\"dominant\"]],\n  \"dorian\": [\"1P 2M 3m 4P 5P 6M 7m\"],\n  \"aeolian\": [\"1P 2M 3m 4P 5P 6m 7m\", [\"minor\"]],\n  \"phrygian\": [\"1P 2m 3m 4P 5P 6m 7m\"],\n  \"locrian\": [\"1P 2m 3m 4P 5d 6m 7m\"],\n  \"melodic minor\": [\"1P 2M 3m 4P 5P 6M 7M\"],\n  \"melodic minor second mode\": [\"1P 2m 3m 4P 5P 6M 7m\"],\n  \"lydian augmented\": [\"1P 2M 3M 4A 5A 6M 7M\"],\n  \"lydian dominant\": [\"1P 2M 3M 4A 5P 6M 7m\", [\"lydian b7\"]],\n  \"melodic minor fifth mode\": [\n    \"1P 2M 3M 4P 5P 6m 7m\",\n    [\"hindu\", \"mixolydian b6M\"]\n  ],\n  \"locrian #2\": [\"1P 2M 3m 4P 5d 6m 7m\", [\"half-diminished\"]],\n  \"altered\": [\n    \"1P 2m 3m 3M 5d 6m 7m\",\n    [\"super locrian\", \"diminished whole tone\", \"pomeroy\"]\n  ],\n  \"harmonic minor\": [\"1P 2M 3m 4P 5P 6m 7M\"],\n  \"phrygian dominant\": [\"1P 2m 3M 4P 5P 6m 7m\", [\"spanish\", \"phrygian major\"]],\n  \"half-whole diminished\": [\"1P 2m 3m 3M 4A 5P 6M 7m\", [\"dominant diminished\"]],\n  \"diminished\": [\"1P 2M 3m 4P 5d 6m 6M 7M\", [\"whole-half diminished\"]],\n  \"major pentatonic\": [\"1P 2M 3M 5P 6M\", [\"pentatonic\"]],\n  \"lydian pentatonic\": [\"1P 3M 4A 5P 7M\", [\"chinese\"]],\n  \"mixolydian pentatonic\": [\"1P 3M 4P 5P 7m\", [\"indian\"]],\n  \"locrian pentatonic\": [\n    \"1P 3m 4P 5d 7m\",\n    [\"minor seven flat five pentatonic\"]\n  ],\n  \"minor pentatonic\": [\"1P 3m 4P 5P 7m\"],\n  \"minor six pentatonic\": [\"1P 3m 4P 5P 6M\"],\n  \"minor hexatonic\": [\"1P 2M 3m 4P 5P 7M\"],\n  \"flat three pentatonic\": [\"1P 2M 3m 5P 6M\", [\"kumoi\"]],\n  \"flat six pentatonic\": [\"1P 2M 3M 5P 6m\"],\n  \"major flat two pentatonic\": [\"1P 2m 3M 5P 6M\"],\n  \"whole tone pentatonic\": [\"1P 3M 5d 6m 7m\"],\n  \"ionian pentatonic\": [\"1P 3M 4P 5P 7M\"],\n  \"lydian #5P pentatonic\": [\"1P 3M 4A 5A 7M\"],\n  \"lydian dominant pentatonic\": [\"1P 3M 4A 5P 7m\"],\n  \"minor #7M pentatonic\": [\"1P 3m 4P 5P 7M\"],\n  \"super locrian pentatonic\": [\"1P 3m 4d 5d 7m\"],\n  \"in-sen\": [\"1P 2m 4P 5P 7m\"],\n  \"iwato\": [\"1P 2m 4P 5d 7m\"],\n  \"hirajoshi\": [\"1P 2M 3m 5P 6m\"],\n  \"kumoijoshi\": [\"1P 2m 4P 5P 6m\"],\n  \"pelog\": [\"1P 2m 3m 5P 6m\"],\n  \"vietnamese 1\": [\"1P 3m 4P 5P 6m\"],\n  \"vietnamese 2\": [\"1P 3m 4P 5P 7m\"],\n  \"prometheus\": [\"1P 2M 3M 4A 6M 7m\"],\n  \"prometheus neopolitan\": [\"1P 2m 3M 4A 6M 7m\"],\n  \"ritusen\": [\"1P 2M 4P 5P 6M\"],\n  \"scriabin\": [\"1P 2m 3M 5P 6M\"],\n  \"piongio\": [\"1P 2M 4P 5P 6M 7m\"],\n  \"major blues\": [\"1P 2M 3m 3M 5P 6M\"],\n  \"minor blues\": [\"1P 3m 4P 5d 5P 7m\", [\"blues\"]],\n  \"composite blues\": [\"1P 2M 3m 3M 4P 5d 5P 6M 7m\"],\n  \"augmented\": [\"1P 2A 3M 5P 5A 7M\"],\n  \"augmented heptatonic\": [\"1P 2A 3M 4P 5P 5A 7M\"],\n  \"dorian #4\": [\"1P 2M 3m 4A 5P 6M 7m\"],\n  \"lydian diminished\": [\"1P 2M 3m 4A 5P 6M 7M\"],\n  \"whole tone\": [\"1P 2M 3M 4A 5A 7m\"],\n  \"leading whole tone\": [\"1P 2M 3M 4A 5A 7m 7M\"],\n  \"lydian minor\": [\"1P 2M 3M 4A 5P 6m 7m\"],\n  \"locrian major\": [\"1P 2M 3M 4P 5d 6m 7m\", [\"arabian\"]],\n  \"neopolitan\": [\"1P 2m 3m 4P 5P 6m 7M\"],\n  \"neopolitan minor\": [\"1P 2m 3m 4P 5P 6m 7M\"],\n  \"neopolitan major\": [\"1P 2m 3m 4P 5P 6M 7M\", [\"dorian b2\"]],\n  \"neopolitan major pentatonic\": [\"1P 3M 4P 5d 7m\"],\n  \"romanian minor\": [\"1P 2M 3m 5d 5P 6M 7m\"],\n  \"double harmonic lydian\": [\"1P 2m 3M 4A 5P 6m 7M\"],\n  \"harmonic major\": [\"1P 2M 3M 4P 5P 6m 7M\"],\n  \"double harmonic major\": [\"1P 2m 3M 4P 5P 6m 7M\", [\"gypsy\"]],\n  \"egyptian\": [\"1P 2M 4P 5P 7m\"],\n  \"hungarian minor\": [\"1P 2M 3m 4A 5P 6m 7M\"],\n  \"hungarian major\": [\"1P 2A 3M 4A 5P 6M 7m\"],\n  \"oriental\": [\"1P 2m 3M 4P 5d 6M 7m\"],\n  \"spanish heptatonic\": [\"1P 2m 3m 3M 4P 5P 6m 7m\"],\n  \"flamenco\": [\"1P 2m 3m 3M 4A 5P 7m\"],\n  \"balinese\": [\"1P 2m 3m 4P 5P 6m 7M\"],\n  \"todi raga\": [\"1P 2m 3m 4A 5P 6m 7M\"],\n  \"malkos raga\": [\"1P 3m 4P 6m 7m\"],\n  \"kafi raga\": [\"1P 3m 3M 4P 5P 6M 7m 7M\"],\n  \"purvi raga\": [\"1P 2m 3M 4P 4A 5P 6m 7M\"],\n  \"persian\": [\"1P 2m 3M 4P 5d 6m 7M\"],\n  \"bebop\": [\"1P 2M 3M 4P 5P 6M 7m 7M\"],\n  \"bebop dominant\": [\"1P 2M 3M 4P 5P 6M 7m 7M\"],\n  \"bebop minor\": [\"1P 2M 3m 3M 4P 5P 6M 7m\"],\n  \"bebop major\": [\"1P 2M 3M 4P 5P 5A 6M 7M\"],\n  \"bebop locrian\": [\"1P 2m 3m 4P 5d 5P 6m 7m\"],\n  \"minor bebop\": [\"1P 2M 3m 4P 5P 6m 7m 7M\"],\n  \"mystery #1\": [\"1P 2m 3M 5d 6m 7m\"],\n  \"enigmatic\": [\"1P 2m 3M 5d 6m 7m 7M\"],\n  \"minor six diminished\": [\"1P 2M 3m 4P 5P 6m 6M 7M\"],\n  \"ionian augmented\": [\"1P 2M 3M 4P 5A 6M 7M\"],\n  \"lydian #9\": [\"1P 2m 3M 4A 5P 6M 7M\"],\n  \"ichikosucho\": [\"1P 2M 3M 4P 5d 5P 6M 7M\"],\n  \"six tone symmetric\": [\"1P 2m 3M 4P 5A 6M\"]\n}\n", "{\n  \"4\": [\"1P 4P 7m 10m\", [\"quartal\"]],\n  \"64\": [\"5P 8P 10M\"],\n  \"5\": [\"1P 5P\"],\n  \"M\": [\"1P 3M 5P\", [\"Major\", \"\"]],\n  \"M#5\": [\"1P 3M 5A\", [\"augmented\", \"maj#5\", \"Maj#5\", \"+\", \"aug\"]],\n  \"M#5add9\": [\"1P 3M 5A 9M\", [\"+add9\"]],\n  \"M13\": [\"1P 3M 5P 7M 9M 13M\", [\"maj13\", \"Maj13\"]],\n  \"M13#11\": [\n    \"1P 3M 5P 7M 9M 11A 13M\",\n    [\"maj13#11\", \"Maj13#11\", \"M13+4\", \"M13#4\"]\n  ],\n  \"M6\": [\"1P 3M 5P 13M\", [\"6\"]],\n  \"M6#11\": [\"1P 3M 5P 6M 11A\", [\"M6b5\", \"6#11\", \"6b5\"]],\n  \"M69\": [\"1P 3M 5P 6M 9M\", [\"69\"]],\n  \"M69#11\": [\"1P 3M 5P 6M 9M 11A\"],\n  \"M7#11\": [\"1P 3M 5P 7M 11A\", [\"maj7#11\", \"Maj7#11\", \"M7+4\", \"M7#4\"]],\n  \"M7#5\": [\"1P 3M 5A 7M\", [\"maj7#5\", \"Maj7#5\", \"maj9#5\", \"M7+\"]],\n  \"M7#5sus4\": [\"1P 4P 5A 7M\"],\n  \"M7#9#11\": [\"1P 3M 5P 7M 9A 11A\"],\n  \"M7add13\": [\"1P 3M 5P 6M 7M 9M\"],\n  \"M7b5\": [\"1P 3M 5d 7M\"],\n  \"M7b6\": [\"1P 3M 6m 7M\"],\n  \"M7b9\": [\"1P 3M 5P 7M 9m\"],\n  \"M7sus4\": [\"1P 4P 5P 7M\"],\n  \"M9\": [\"1P 3M 5P 7M 9M\", [\"maj9\", \"Maj9\"]],\n  \"M9#11\": [\"1P 3M 5P 7M 9M 11A\", [\"maj9#11\", \"Maj9#11\", \"M9+4\", \"M9#4\"]],\n  \"M9#5\": [\"1P 3M 5A 7M 9M\", [\"Maj9#5\"]],\n  \"M9#5sus4\": [\"1P 4P 5A 7M 9M\"],\n  \"M9b5\": [\"1P 3M 5d 7M 9M\"],\n  \"M9sus4\": [\"1P 4P 5P 7M 9M\"],\n  \"Madd9\": [\"1P 3M 5P 9M\", [\"2\", \"add9\", \"add2\"]],\n  \"Maj7\": [\"1P 3M 5P 7M\", [\"maj7\", \"M7\"]],\n  \"Mb5\": [\"1P 3M 5d\"],\n  \"Mb6\": [\"1P 3M 13m\"],\n  \"Msus2\": [\"1P 2M 5P\", [\"add9no3\", \"sus2\"]],\n  \"Msus4\": [\"1P 4P 5P\", [\"sus\", \"sus4\"]],\n  \"Maddb9\": [\"1P 3M 5P 9m\"],\n  \"7\": [\"1P 3M 5P 7m\", [\"Dominant\", \"Dom\"]],\n  \"9\": [\"1P 3M 5P 7m 9M\", [\"79\"]],\n  \"11\": [\"1P 5P 7m 9M 11P\"],\n  \"13\": [\"1P 3M 5P 7m 9M 13M\", [\"13_\"]],\n  \"11b9\": [\"1P 5P 7m 9m 11P\"],\n  \"13#11\": [\"1P 3M 5P 7m 9M 11A 13M\", [\"13+4\", \"13#4\"]],\n  \"13#9\": [\"1P 3M 5P 7m 9A 13M\", [\"13#9_\"]],\n  \"13#9#11\": [\"1P 3M 5P 7m 9A 11A 13M\"],\n  \"13b5\": [\"1P 3M 5d 6M 7m 9M\"],\n  \"13b9\": [\"1P 3M 5P 7m 9m 13M\"],\n  \"13b9#11\": [\"1P 3M 5P 7m 9m 11A 13M\"],\n  \"13no5\": [\"1P 3M 7m 9M 13M\"],\n  \"13sus4\": [\"1P 4P 5P 7m 9M 13M\", [\"13sus\"]],\n  \"69#11\": [\"1P 3M 5P 6M 9M 11A\"],\n  \"7#11\": [\"1P 3M 5P 7m 11A\", [\"7+4\", \"7#4\", \"7#11_\", \"7#4_\"]],\n  \"7#11b13\": [\"1P 3M 5P 7m 11A 13m\", [\"7b5b13\"]],\n  \"7#5\": [\"1P 3M 5A 7m\", [\"+7\", \"7aug\", \"aug7\"]],\n  \"7#5#9\": [\"1P 3M 5A 7m 9A\", [\"7alt\", \"7#5#9_\", \"7#9b13_\"]],\n  \"7#5b9\": [\"1P 3M 5A 7m 9m\"],\n  \"7#5b9#11\": [\"1P 3M 5A 7m 9m 11A\"],\n  \"7#5sus4\": [\"1P 4P 5A 7m\"],\n  \"7#9\": [\"1P 3M 5P 7m 9A\", [\"7#9_\"]],\n  \"7#9#11\": [\"1P 3M 5P 7m 9A 11A\", [\"7b5#9\"]],\n  \"7#9#11b13\": [\"1P 3M 5P 7m 9A 11A 13m\"],\n  \"7#9b13\": [\"1P 3M 5P 7m 9A 13m\"],\n  \"7add6\": [\"1P 3M 5P 7m 13M\", [\"67\", \"7add13\"]],\n  \"7b13\": [\"1P 3M 7m 13m\"],\n  \"7b5\": [\"1P 3M 5d 7m\"],\n  \"7b6\": [\"1P 3M 5P 6m 7m\"],\n  \"7b9\": [\"1P 3M 5P 7m 9m\"],\n  \"7b9#11\": [\"1P 3M 5P 7m 9m 11A\", [\"7b5b9\"]],\n  \"7b9#9\": [\"1P 3M 5P 7m 9m 9A\"],\n  \"7b9b13\": [\"1P 3M 5P 7m 9m 13m\"],\n  \"7b9b13#11\": [\"1P 3M 5P 7m 9m 11A 13m\", [\"7b9#11b13\", \"7b5b9b13\"]],\n  \"7no5\": [\"1P 3M 7m\"],\n  \"7sus4\": [\"1P 4P 5P 7m\", [\"7sus\"]],\n  \"7sus4b9\": [\n    \"1P 4P 5P 7m 9m\",\n    [\"susb9\", \"7susb9\", \"7b9sus\", \"7b9sus4\", \"phryg\"]\n  ],\n  \"7sus4b9b13\": [\"1P 4P 5P 7m 9m 13m\", [\"7b9b13sus4\"]],\n  \"9#11\": [\"1P 3M 5P 7m 9M 11A\", [\"9+4\", \"9#4\", \"9#11_\", \"9#4_\"]],\n  \"9#11b13\": [\"1P 3M 5P 7m 9M 11A 13m\", [\"9b5b13\"]],\n  \"9#5\": [\"1P 3M 5A 7m 9M\", [\"9+\"]],\n  \"9#5#11\": [\"1P 3M 5A 7m 9M 11A\"],\n  \"9b13\": [\"1P 3M 7m 9M 13m\"],\n  \"9b5\": [\"1P 3M 5d 7m 9M\"],\n  \"9no5\": [\"1P 3M 7m 9M\"],\n  \"9sus4\": [\"1P 4P 5P 7m 9M\", [\"9sus\"]],\n  \"m\": [\"1P 3m 5P\"],\n  \"m#5\": [\"1P 3m 5A\", [\"m+\", \"mb6\"]],\n  \"m11\": [\"1P 3m 5P 7m 9M 11P\", [\"_11\"]],\n  \"m11A 5\": [\"1P 3m 6m 7m 9M 11P\"],\n  \"m11b5\": [\"1P 3m 7m 12d 2M 4P\", [\"h11\", \"_11b5\"]],\n  \"m13\": [\"1P 3m 5P 7m 9M 11P 13M\", [\"_13\"]],\n  \"m6\": [\"1P 3m 4P 5P 13M\", [\"_6\"]],\n  \"m69\": [\"1P 3m 5P 6M 9M\", [\"_69\"]],\n  \"m7\": [\"1P 3m 5P 7m\", [\"minor7\", \"_\", \"_7\"]],\n  \"m7#5\": [\"1P 3m 6m 7m\"],\n  \"m7add11\": [\"1P 3m 5P 7m 11P\", [\"m7add4\"]],\n  \"m7b5\": [\"1P 3m 5d 7m\", [\"half-diminished\", \"h7\", \"_7b5\"]],\n  \"m9\": [\"1P 3m 5P 7m 9M\", [\"_9\"]],\n  \"m9#5\": [\"1P 3m 6m 7m 9M\"],\n  \"m9b5\": [\"1P 3m 7m 12d 2M\", [\"h9\", \"-9b5\"]],\n  \"mMaj7\": [\"1P 3m 5P 7M\", [\"mM7\", \"_M7\"]],\n  \"mMaj7b6\": [\"1P 3m 5P 6m 7M\", [\"mM7b6\"]],\n  \"mM9\": [\"1P 3m 5P 7M 9M\", [\"mMaj9\", \"-M9\"]],\n  \"mM9b6\": [\"1P 3m 5P 6m 7M 9M\", [\"mMaj9b6\"]],\n  \"mb6M7\": [\"1P 3m 6m 7M\"],\n  \"mb6b9\": [\"1P 3m 6m 9m\"],\n  \"o\": [\"1P 3m 5d\", [\"mb5\", \"dim\"]],\n  \"o7\": [\"1P 3m 5d 13M\", [\"diminished\", \"m6b5\", \"dim7\"]],\n  \"o7M7\": [\"1P 3m 5d 6M 7M\"],\n  \"oM7\": [\"1P 3m 5d 7M\"],\n  \"sus24\": [\"1P 2M 4P 5P\", [\"sus4add9\"]],\n  \"+add#9\": [\"1P 3M 5A 9A\"],\n  \"madd4\": [\"1P 3m 4P 5P\"],\n  \"madd9\": [\"1P 3m 5P 9M\"]\n}\n", "/**\n * [![npm version](https://img.shields.io/npm/v/tonal-pcset.svg?style=flat-square)](https://www.npmjs.com/package/tonal-pcset)\n * [![tonal](https://img.shields.io/badge/tonal-pcset-yellow.svg?style=flat-square)](https://www.npmjs.com/browse/keyword/tonal)\n *\n * `tonal-pcset` is a collection of functions to work with pitch class sets, oriented\n * to make comparations (isEqual, isSubset, isSuperset)\n *\n * This is part of [tonal](https://www.npmjs.com/package/tonal) music theory library.\n *\n * You can install via npm: `npm i --save tonal-pcset`\n *\n * ```js\n * // es6\n * import PcSet from \"tonal-pcset\"\n * var PcSet = require(\"tonal-pcset\")\n *\n * PcSet.isEqual(\"c2 d5 e6\", \"c6 e3 d1\") // => true\n * ```\n *\n * ## API documentation\n *\n * @module PcSet\n */\nimport { chroma as notechr } from \"tonal-note\";\nimport { chroma as ivlchr } from \"tonal-interval\";\nimport { rotate, range, compact } from \"tonal-array\";\n\nvar chr = function (str) { return notechr(str) || ivlchr(str) || 0; };\nvar pcsetNum = function (set) { return parseInt(chroma(set), 2); };\nvar clen = function (chroma) { return chroma.replace(/0/g, \"\").length; };\n\n/**\n * Get chroma of a pitch class set. A chroma identifies each set uniquely.\n * It\"s a 12-digit binary each presenting one semitone of the octave.\n *\n * Note that this function accepts a chroma as parameter and return it\n * without modification.\n *\n * @param {Array|String} set - the pitch class set\n * @return {string} a binary representation of the pitch class set\n * @example\n * PcSet.chroma([\"C\", \"D\", \"E\"]) // => \"1010100000000\"\n */\nexport function chroma(set) {\n  if (isChroma(set)) { return set; }\n  if (!Array.isArray(set)) { return \"\"; }\n  var b = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n  set.map(chr).forEach(function (i) {\n    b[i] = 1;\n  });\n  return b.join(\"\");\n}\n\nvar all = null;\n/**\n * Get a list of all possible chromas (all possible scales)\n * More information: http://allthescales.org/\n * @return {Array} an array of possible chromas from '10000000000' to '11111111111'\n *\n */\nexport function chromas(n) {\n  all = all || range(2048, 4095).map(function (n) { return n.toString(2); });\n  return typeof n === \"number\"\n    ? all.filter(function (chroma) { return clen(chroma) === n; })\n    : all.slice();\n}\n\n/**\n * Given a a list of notes or a pcset chroma, produce the rotations\n * of the chroma discarding the ones that starts with \"0\"\n *\n * This is used, for example, to get all the modes of a scale.\n *\n * @param {Array|String} set - the list of notes or pitchChr of the set\n * @param {Boolean} normalize - (Optional, true by default) remove all\n * the rotations that starts with \"0\"\n * @return {Array<String>} an array with all the modes of the chroma\n *\n * @example\n * PcSet.modes([\"C\", \"D\", \"E\"]).map(PcSet.intervals)\n */\nexport function modes(set, normalize) {\n  normalize = normalize !== false;\n  var binary = chroma(set).split(\"\");\n  return compact(\n    binary.map(function(_, i) {\n      var r = rotate(i, binary);\n      return normalize && r[0] === \"0\" ? null : r.join(\"\");\n    })\n  );\n}\n\nvar REGEX = /^[01]{12}$/;\n/**\n * Test if the given string is a pitch class set chroma.\n * @param {string} chroma - the pitch class set chroma\n * @return {Boolean} true if its a valid pcset chroma\n * @example\n * PcSet.isChroma(\"101010101010\") // => true\n * PcSet.isChroma(\"101001\") // => false\n */\nexport function isChroma(set) {\n  return REGEX.test(set);\n}\n\nvar IVLS = \"1P 2m 2M 3m 3M 4P 5d 5P 6m 6M 7m 7M\".split(\" \");\n/**\n * Given a pcset (notes or chroma) return it\"s intervals\n * @param {String|Array} pcset - the pitch class set (notes or chroma)\n * @return {Array} intervals or empty array if not valid pcset\n * @example\n * PcSet.intervals(\"1010100000000\") => [\"1P\", \"2M\", \"3M\"]\n */\nexport function intervals(set) {\n  if (!isChroma(set)) { return []; }\n  return compact(\n    set.split(\"\").map(function(d, i) {\n      return d === \"1\" ? IVLS[i] : null;\n    })\n  );\n}\n\n/**\n * Test if two pitch class sets are identical\n *\n * @param {Array|String} set1 - one of the pitch class sets\n * @param {Array|String} set2 - the other pitch class set\n * @return {Boolean} true if they are equal\n * @example\n * PcSet.isEqual([\"c2\", \"d3\"], [\"c5\", \"d2\"]) // => true\n */\nexport function isEqual(s1, s2) {\n  if (arguments.length === 1) { return function (s) { return isEqual(s1, s); }; }\n  return chroma(s1) === chroma(s2);\n}\n\n/**\n * Create a function that test if a collection of notes is a\n * subset of a given set\n *\n * The function can be partially applied\n *\n * @param {Array|String} set - an array of notes or a chroma set string to test against\n * @param {Array|String} notes - an array of notes or a chroma set\n * @return {boolean} true if notes is a subset of set, false otherwise\n * @example\n * const inCMajor = PcSet.isSubsetOf([\"C\", \"E\", \"G\"])\n * inCMajor([\"e6\", \"c4\"]) // => true\n * inCMajor([\"e6\", \"c4\", \"d3\"]) // => false\n */\nexport function isSubsetOf(set, notes) {\n  if (arguments.length > 1) { return isSubsetOf(set)(notes); }\n  set = pcsetNum(set);\n  return function(notes) {\n    notes = pcsetNum(notes);\n    return notes !== set && (notes & set) === notes;\n  };\n}\n\n/**\n * Create a function that test if a collectio of notes is a\n * superset of a given set (it contains all notes and at least one more)\n *\n * @param {Array|String} set - an array of notes or a chroma set string to test against\n * @param {Array|String} notes - an array of notes or a chroma set\n * @return {boolean} true if notes is a superset of set, false otherwise\n * @example\n * const extendsCMajor = PcSet.isSupersetOf([\"C\", \"E\", \"G\"])\n * extendsCMajor([\"e6\", \"a\", \"c4\", \"g2\"]) // => true\n * extendsCMajor([\"c6\", \"e4\", \"g3\"]) // => false\n */\nexport function isSupersetOf(set, notes) {\n  if (arguments.length > 1) { return isSupersetOf(set)(notes); }\n  set = pcsetNum(set);\n  return function(notes) {\n    notes = pcsetNum(notes);\n    return notes !== set && (notes | set) === notes;\n  };\n}\n\n/**\n * Test if a given pitch class set includes a note\n * @param {Array|String} set - the base set to test against\n * @param {String|Pitch} note - the note to test\n * @return {Boolean} true if the note is included in the pcset\n * @example\n * PcSet.includes([\"C\", \"D\", \"E\"], \"C4\") // => true\n * PcSet.includes([\"C\", \"D\", \"E\"], \"C#4\") // => false\n */\nexport function includes(set, note) {\n  if (arguments.length > 1) { return includes(set)(note); }\n  set = chroma(set);\n  return function(note) {\n    return set[chr(note)] === \"1\";\n  };\n}\n\n/**\n * Filter a list with a pitch class set\n *\n * @param {Array|String} set - the pitch class set notes\n * @param {Array|String} notes - the note list to be filtered\n * @return {Array} the filtered notes\n *\n * @example\n * PcSet.filter([\"C\", \"D\", \"E\"], [\"c2\", \"c#2\", \"d2\", \"c3\", \"c#3\", \"d3\"]) // => [ \"c2\", \"d2\", \"c3\", \"d3\" ])\n * PcSet.filter([\"C2\"], [\"c2\", \"c#2\", \"d2\", \"c3\", \"c#3\", \"d3\"]) // => [ \"c2\", \"c3\" ])\n */\nexport function filter(set, notes) {\n  if (arguments.length === 1) { return function (n) { return filter(set, n); }; }\n  return notes.filter(includes(set));\n}\n", "/**\n * [![npm version](https://img.shields.io/npm/v/tonal-scale.svg?style=flat-square)](https://www.npmjs.com/package/tonal-scale)\n *\n * A scale is a collection of pitches in ascending or descending order.\n *\n * This module provides functions to get and manipulate scales.\n *\n * @example\n * // es6\n * import * as Scale from \"tonal-scale\"\n * // es5\n * const Scale = require(\"tonal-scale\");\n *\n * @example\n * Scale.notes(\"Ab bebop\") // => [ \"Ab\", \"Bb\", \"C\", \"Db\", \"Eb\", \"F\", \"Gb\", \"G\" ]\n * Scale.names() => [\"major\", \"minor\", ...]\n * @module Scale\n */\nimport { name as noteName, pc } from \"tonal-note\";\nimport {\n  modes as pcsetModes,\n  chroma,\n  isSubsetOf,\n  isSupersetOf\n} from \"tonal-pcset\";\nimport { transpose } from \"tonal-distance\";\nimport { scale, chord } from \"tonal-dictionary\";\nimport { compact, unique, rotate } from \"tonal-array\";\n\nvar NO_SCALE = Object.freeze({\n  name: null,\n  intervals: [],\n  names: [],\n  chroma: null,\n  setnum: null\n});\n\nvar properties = function (name) {\n  var intervals = scale(name);\n  if (!intervals) { return NO_SCALE; }\n  var s = { intervals: intervals, name: name };\n  s.chroma = chroma(intervals);\n  s.setnum = parseInt(s.chroma, 2);\n  s.names = scale.names(s.chroma);\n  return Object.freeze(s);\n};\n\nvar memoize = function (fn, cache) { return function (str) { return cache[str] || (cache[str] = fn(str)); }; };\n\n/**\n * Get scale properties. It returns an object with:\n * - name: the scale name\n * - names: a list with all possible names (includes the current)\n * - intervals: an array with the scale intervals\n * - chroma:  scale croma (see pcset)\n * - setnum: scale chroma number\n *\n * @function\n * @param {string} name - the scale name (without tonic)\n * @return {Object}\n */\nexport var props = memoize(properties, {});\n\n/**\n * Return the available scale names\n *\n * @function\n * @param {boolean} [aliases=false] - true to include aliases\n * @return {Array} the scale names\n *\n * @example\n * Scale.names() // => [\"maj7\", ...]\n */\nexport var names = scale.names;\n\n/**\n * Given a scale name, return its intervals. The name can be the type and\n * optionally the tonic (which is ignored)\n *\n * It retruns an empty array when no scale found\n *\n * @function\n * @param {string} name - the scale name (tonic and type, tonic is optional)\n * @return {Array<string>} the scale intervals if is a known scale or an empty\n * array if no scale found\n * @example\n * Scale.intervals(\"major\") // => [ \"1P\", \"2M\", \"3M\", \"4P\", \"5P\", \"6M\", \"7M\" ]\n */\nexport var intervals = function (name) {\n  var p = tokenize(name);\n  return props(p[1]).intervals;\n};\n\n/**\n * Get the notes (pitch classes) of a scale.\n *\n * Note that it always returns an array, and the values are only pitch classes.\n *\n * @function\n * @param {string} tonic\n * @param {string} nameOrTonic - the scale name or tonic (if 2nd param)\n * @param {string} [name] - the scale name without tonic\n * @return {Array} a pitch classes array\n *\n * @example\n * Scale.notes(\"C\", \"major\") // => [ \"C\", \"D\", \"E\", \"F\", \"G\", \"A\", \"B\" ]\n * Scale.notes(\"C major\") // => [ \"C\", \"D\", \"E\", \"F\", \"G\", \"A\", \"B\" ]\n * Scale.notes(\"C4\", \"major\") // => [ \"C\", \"D\", \"E\", \"F\", \"G\", \"A\", \"B\" ]\n * Scale.notes(\"A4\", \"no-scale\") // => []\n * Scale.notes(\"blah\", \"major\") // => []\n */\nexport function notes(nameOrTonic, name) {\n  var p = tokenize(nameOrTonic);\n  name = name || p[1];\n  return intervals(name).map(transpose(p[0]));\n}\n\n/**\n * Check if the given name is a known scale from the scales dictionary\n *\n * @function\n * @param {string} name - the scale name\n * @return {Boolean}\n */\nexport function exists(name) {\n  var p = tokenize(name);\n  return scale(p[1]) !== undefined;\n}\n\n/**\n * Given a string with a scale name and (optionally) a tonic, split\n * that components.\n *\n * It retuns an array with the form [ name, tonic ] where tonic can be a\n * note name or null and name can be any arbitrary string\n * (this function doesn\"t check if that scale name exists)\n *\n * @function\n * @param {string} name - the scale name\n * @return {Array} an array [tonic, name]\n * @example\n * Scale.tokenize(\"C mixolydean\") // => [\"C\", \"mixolydean\"]\n * Scale.tokenize(\"anything is valid\") // => [\"\", \"anything is valid\"]\n * Scale.tokenize() // => [\"\", \"\"]\n */\nexport function tokenize(str) {\n  if (typeof str !== \"string\") { return [\"\", \"\"]; }\n  var i = str.indexOf(\" \");\n  var tonic = noteName(str.substring(0, i)) || noteName(str) || \"\";\n  var name = tonic !== \"\" ? str.substring(tonic.length + 1) : str;\n  return [tonic, name.length ? name : \"\"];\n}\n\n/**\n * Find mode names of a scale\n *\n * @function\n * @param {string} name - scale name\n * @example\n * Scale.modeNames(\"C pentatonic\") // => [\n *   [\"C\", \"major pentatonic\"],\n *   [\"D\", \"egyptian\"],\n *   [\"E\", \"malkos raga\"],\n *   [\"G\", \"ritusen\"],\n *   [\"A\", \"minor pentatonic\"]\n * ]\n */\nexport var modeNames = function (name) {\n  var ivls = intervals(name);\n  var tonics = notes(name);\n\n  return pcsetModes(ivls)\n    .map(function (chroma, i) {\n      var name = scale.names(chroma)[0];\n      if (name) { return [tonics[i] || ivls[i], name]; }\n    })\n    .filter(function (x) { return x; });\n};\n\n/**\n * Get all chords that fits a given scale\n *\n * @function\n * @param {string} name - the scale name\n * @return {Array<string>} - the chord names\n *\n * @example\n * Scale.chords(\"pentatonic\") // => [\"5\", \"64\", \"M\", \"M6\", \"Madd9\", \"Msus2\"]\n */\nexport var chords = function (name) {\n  var inScale = isSubsetOf(intervals(name));\n  return chord.names().filter(function (name) { return inScale(chord(name)); });\n};\n\n/**\n * Given an array of notes, return the scale: a pitch class set starting from\n * the first note of the array\n *\n * @function\n * @param {Array} notes\n * @return {Array}\n * @example\n * Scale.toScale(['C4', 'c3', 'C5', 'C4', 'c4']) // => [\"C\"]\n * Scale.toScale(['D4', 'c#5', 'A5', 'F#6']) // => [\"D\", \"F#\", \"A\", \"C#\"]\n */\nexport var toScale = function (notes) {\n  var pcset = compact(notes.map(pc));\n  if (!pcset.length) { return pcset; }\n  var tonic = pcset[0];\n  var scale = unique(pcset);\n  return rotate(scale.indexOf(tonic), scale);\n};\n\n/**\n * Get all scales names that are a superset of the given one\n * (has the same notes and at least one more)\n *\n * @function\n * @param {string} name\n * @return {Array} a list of scale names\n * @example\n * Scale.supersets(\"major\") // => [\"bebop\", \"bebop dominant\", \"bebop major\", \"chromatic\", \"ichikosucho\"]\n */\nexport var supersets = function (name) {\n  if (!intervals(name).length) { return []; }\n  var isSuperset = isSupersetOf(intervals(name));\n  return scale.names().filter(function (name) { return isSuperset(scale(name)); });\n};\n\n/**\n * Find all scales names that are a subset of the given one\n * (has less notes but all from the given scale)\n *\n * @function\n * @param {string} name\n * @return {Array} a list of scale names\n *\n * @example\n * Scale.subsets(\"major\") // => [\"ionian pentatonic\", \"major pentatonic\", \"ritusen\"]\n */\nexport var subsets = function (name) {\n  var isSubset = isSubsetOf(intervals(name));\n  return scale.names().filter(function (name) { return isSubset(scale(name)); });\n};\n", "/**\n * [![npm version](https://img.shields.io/npm/v/tonal-chord.svg)](https://www.npmjs.com/package/tonal-chord)\n * [![tonal](https://img.shields.io/badge/tonal-chord-yellow.svg)](https://www.npmjs.com/browse/keyword/tonal)\n *\n * `tonal-chord` is a collection of functions to manipulate musical chords\n *\n * This is part of [tonal](https://www.npmjs.com/package/tonal) music theory library.\n *\n * @example\n * // es6\n * import * as Chord from \"tonal-chord\"\n * // es5\n * const Chord = require(\"tonal-chord\")\n *\n * @example\n * Chord.notes(\"CMaj7\") // => [\"C\", \"E\", \"G\", \"B\"]\n *\n * @module Chord\n */\nimport { tokenize as split } from \"tonal-note\";\nimport { transpose } from \"tonal-distance\";\nimport { chord } from \"tonal-dictionary\";\nimport { chroma, isSubsetOf, isSupersetOf } from \"tonal-pcset\";\n\n/**\n * Return the available chord names\n *\n * @function\n * @param {boolean} aliases - true to include aliases\n * @return {Array} the chord names\n *\n * @example\n * Chord.names() // => [\"maj7\", ...]\n */\nexport var names = chord.names;\n\nvar NO_CHORD = Object.freeze({\n  name: null,\n  names: [],\n  intervals: [],\n  chroma: null,\n  setnum: null\n});\n\nvar properties = function (name) {\n  var intervals = chord(name);\n  if (!intervals) { return NO_CHORD; }\n  var s = { intervals: intervals, name: name };\n  s.chroma = chroma(intervals);\n  s.setnum = parseInt(s.chroma, 2);\n  s.names = chord.names(s.chroma);\n  return s;\n};\n\nvar memo = function (fn, cache) {\n  if ( cache === void 0 ) cache = {};\n\n  return function (str) { return cache[str] || (cache[str] = fn(str)); };\n};\n\n/**\n * Get chord properties. It returns an object with:\n *\n * - name: the chord name\n * - names: a list with all possible names (includes the current)\n * - intervals: an array with the chord intervals\n * - chroma:  chord croma (see pcset)\n * - setnum: chord chroma number\n *\n * @function\n * @param {string} name - the chord name (without tonic)\n * @return {Object} an object with the properties or a object with all properties\n * set to null if not valid chord name\n */\nexport var props = memo(properties);\n\n/**\n * Get chord intervals. It always returns an array\n *\n * @function\n * @param {string} name - the chord name (optionally a tonic and type)\n * @return {Array<String>} a list of intervals or null if the type is not known\n */\nexport var intervals = function (name) { return props(tokenize(name)[1]).intervals; };\n\n/**\n * Get the chord notes of a chord. This function accepts either a chord name\n * (for example: \"Cmaj7\") or a list of notes.\n *\n * It always returns an array, even if the chord is not found.\n *\n * @function\n * @param {string} nameOrTonic - name of the chord or the tonic (if the second parameter is present)\n * @param {string} [name] - (Optional) name if the first parameter is the tonic\n * @return {Array} an array of notes or an empty array\n *\n * @example\n * Chord.notes(\"Cmaj7\") // => [\"C\", \"E\", \"G\", \"B\"]\n * Chord.notes(\"C\", \"maj7\") // => [\"C\", \"E\", \"G\", \"B\"]\n */\nexport function notes(nameOrTonic, name) {\n  if (name) { return props(name).intervals.map(transpose(nameOrTonic)); }\n  var ref = tokenize(nameOrTonic);\n  var tonic = ref[0];\n  var type = ref[1];\n  return props(type).intervals.map(transpose(tonic));\n}\n\n/**\n * Check if a given name correspond to a chord in the dictionary\n *\n * @function\n * @param {string} name\n * @return {Boolean}\n * @example\n * Chord.exists(\"CMaj7\") // => true\n * Chord.exists(\"Maj7\") // => true\n * Chord.exists(\"Ablah\") // => false\n */\nexport var exists = function (name) { return chord(tokenize(name)[1]) !== undefined; };\n\n/**\n * Get all chords names that are a superset of the given one\n * (has the same notes and at least one more)\n *\n * @function\n * @param {string} name\n * @return {Array} a list of chord names\n */\nexport var supersets = function (name) {\n  if (!intervals(name).length) { return []; }\n  var isSuperset = isSupersetOf(intervals(name));\n  return chord.names().filter(function (name) { return isSuperset(chord(name)); });\n};\n\n/**\n * Find all chords names that are a subset of the given one\n * (has less notes but all from the given chord)\n *\n * @function\n * @param {string} name\n * @return {Array} a list of chord names\n */\nexport var subsets = function (name) {\n  var isSubset = isSubsetOf(intervals(name));\n  return chord.names().filter(function (name) { return isSubset(chord(name)); });\n};\n\n// 6, 64, 7, 9, 11 and 13 are consider part of the chord\n// (see https://github.com/danigb/tonal/issues/55)\nvar NUM_TYPES = /^(6|64|7|9|11|13)$/;\n/**\n * Tokenize a chord name. It returns an array with the tonic and chord type\n * If not tonic is found, all the name is considered the chord name.\n *\n * This function does NOT check if the chord type exists or not. It only tries\n * to split the tonic and chord type.\n *\n * @function\n * @param {string} name - the chord name\n * @return {Array} an array with [tonic, type]\n * @example\n * Chord.tokenize(\"Cmaj7\") // => [ \"C\", \"maj7\" ]\n * Chord.tokenize(\"C7\") // => [ \"C\", \"7\" ]\n * Chord.tokenize(\"mMaj7\") // => [ \"\", \"mMaj7\" ]\n * Chord.tokenize(\"Cnonsense\") // => [ \"C\", \"nonsense\" ]\n */\nexport function tokenize(name) {\n  var p = split(name);\n  if (p[0] === \"\") { return [\"\", name]; }\n  // aug is augmented (see https://github.com/danigb/tonal/issues/55)\n  if (p[0] === \"A\" && p[3] === \"ug\") { return [\"\", \"aug\"]; }\n\n  if (NUM_TYPES.test(p[2])) {\n    return [p[0] + p[1], p[2] + p[3]];\n  } else {\n    return [p[0] + p[1] + p[2], p[3]];\n  }\n}\n", "/**\n * [![npm version](https://img.shields.io/npm/v/tonal-key.svg?style=flat-square)](https://www.npmjs.com/package/tonal-key)\n *\n * The `Tonal` module is a facade to the rest of the modules. They are namespaced,\n * so for example to use `pc` function from `tonal-note` you have to write:\n * `Tonal.Note.pc`\n *\n * It exports the following modules:\n * - Note\n * - Interval\n * - Distance\n * - Scale\n * - Chord\n * - PcSet\n *\n * Additionally this facade exports some functions without namespace (see \"Methods\" below)\n *\n * @example\n * // es6 modules\n * import * as Tonal from \"tonal\"\n * Tonal.Note.name(\"cx\") // => \"C##\"\n *\n * @example\n * import { Note } from \"tonal\"\n * Note.name(\"bb\") // => \"Bb\"\n *\n * @example\n * // es5 node modules\n * var Tonal = require(\"tonal\");\n * Tonal.Distance.transpose(Tonal.Note.pc(\"C#2\"), \"M3\") // => \"E#\"\n * Tonal.Chord.notes(\"Dmaj7\") // => [\"D\", \"F#\", \"A\", \"C#\"]\n *\n * @module Tonal\n */\nimport * as Array from \"tonal-array\";\nimport * as Note from \"tonal-note\";\nimport * as Interval from \"tonal-interval\";\nimport * as Distance from \"tonal-distance\";\nimport * as Dictionary from \"tonal-dictionary\";\nimport * as Scale from \"tonal-scale\";\nimport * as Chord from \"tonal-chord\";\nimport * as PcSet from \"tonal-pcset\";\n\nexport { Array, Note, Interval, Distance, Scale, Chord, PcSet, Dictionary };\n\n/**\n * Transpose a note by an interval\n * @function\n * @param {string} note\n * @param {string} interval\n * @return {string} the transported note\n * @see Distance.transpose\n */\nexport const transpose = Distance.transpose;\n\n/**\n * Get the interval from two notes\n * @function\n * @param {string} from\n * @param {string} to\n * @return {string} the interval in reverse shorthand notation\n * @see Distance.interval\n */\nexport const interval = Distance.interval;\n\n/**\n * Get note properties\n * @function\n * @param {string} note - the note name\n * @return {Object}\n * @see Note.props\n * @example\n * Tonal.note(\"A4\").chroma // => 9\n */\nexport const note = Note.props;\n\n/**\n * Get midi note number\n * @function\n * @param {string} note\n * @return {Number}\n * @see Note.midi\n * @example\n * Tonal.midi(\"A4\") // => 49\n */\nexport const midi = Note.midi;\n\n/**\n * Get note frequency using equal tempered tuning at 440\n * @function\n * @param {string} note\n * @return {Number}\n * @see Note.freq\n * @example\n * Tonal.freq(\"A4\") // => 440\n */\nexport const freq = Note.freq;\n\n/**\n * Get intervals from a chord type\n * @function\n * @param {string} type - the chord type (no tonic)\n * @return {Array} an array of intervals or undefined if the chord type is not known\n * @see Dictionary.chord\n * @example\n * Tonal.chord(\"m7b5\") // => [\"1P\", \"3m\", \"5d\", \"7m\"]\n */\nexport const chord = Dictionary.chord;\n\n/**\n * Get intervals from scale name\n * @function\n * @param {string} name - the scale name (without tonic)\n * @return {Array} an array of intervals or undefiend if the scale is not kown\n * @example\n * Tonal.scale(\"major\") // => [\"1P\", \"2M\", \"3M\"...]\n */\nexport const scale = Dictionary.scale;\n"],
  "mappings": "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",
  "names": ["es6_exports", "cache", "note", "midi", "freq", "num", "alt", "oct", "pc", "chroma", "name", "es6_exports", "build", "chroma", "name", "names", "props", "simplify", "tokenize", "REGEX", "NAMES", "fillStr", "num", "properties", "oct", "es6_exports", "semitones", "oct", "memo", "cache", "props", "note", "interval", "i", "fifths", "from", "to", "build", "t", "semitones", "es6_exports", "es6_exports", "chroma", "chroma", "n", "REGEX", "notes", "note", "add", "name", "chroma", "chr", "es6_exports", "intervals", "names", "props", "tokenize", "properties", "name", "intervals", "chroma", "cache", "props", "names", "tokenize", "notes", "pcset", "scale", "es6_exports", "exists", "intervals", "names", "notes", "props", "subsets", "supersets", "tokenize", "names", "properties", "name", "intervals", "chroma", "memo", "cache", "props", "tokenize", "notes", "exists", "supersets", "subsets", "transpose", "interval", "midi", "freq", "chord", "scale"]
}
